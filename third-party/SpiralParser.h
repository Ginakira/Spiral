/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : Spiral.g
 *     -                            On : 2021-03-18 22:22:12
 *     -                for the parser : SpiralParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
SpiralParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pSpiralParser, which is returned from a call to SpiralParserNew().
 *
 * The methods in pSpiralParser are  as follows:
 *
 *  - 
 SpiralParser_defid_expr_return
      pSpiralParser->defid_expr(pSpiralParser)
 *  - 
 SpiralParser_defid_return
      pSpiralParser->defid(pSpiralParser)
 *  - 
 SpiralParser_expr_return
      pSpiralParser->expr(pSpiralParser)
 *  - 
 SpiralParser_multExpr_return
      pSpiralParser->multExpr(pSpiralParser)
 *  - 
 SpiralParser_atom_return
      pSpiralParser->atom(pSpiralParser)
 *  - 
 SpiralParser_if_expr_return
      pSpiralParser->if_expr(pSpiralParser)
 *  - 
 SpiralParser_for_expr_return
      pSpiralParser->for_expr(pSpiralParser)
 *  - 
 SpiralParser_while_expr_return
      pSpiralParser->while_expr(pSpiralParser)
 *  - 
 SpiralParser_init_expr_return
      pSpiralParser->init_expr(pSpiralParser)
 *  - 
 SpiralParser_for_do_expr_return
      pSpiralParser->for_do_expr(pSpiralParser)
 *  - 
 SpiralParser_condition_expr_return
      pSpiralParser->condition_expr(pSpiralParser)
 *  - 
 SpiralParser_andExpr_return
      pSpiralParser->andExpr(pSpiralParser)
 *  - 
 SpiralParser_cmp_atom_return
      pSpiralParser->cmp_atom(pSpiralParser)
 *  - 
 SpiralParser_cond_atom_return
      pSpiralParser->cond_atom(pSpiralParser)
 *  - 
 SpiralParser_func_stmt_return
      pSpiralParser->func_stmt(pSpiralParser)
 *  - 
 SpiralParser_func_call_return
      pSpiralParser->func_call(pSpiralParser)
 *  - 
 SpiralParser_param_return
      pSpiralParser->param(pSpiralParser)
 *  - 
 SpiralParser_def_param_expr_return
      pSpiralParser->def_param_expr(pSpiralParser)
 *  - 
 SpiralParser_param_expr_return
      pSpiralParser->param_expr(pSpiralParser)
 *  - 
 SpiralParser_param_sub_expr_return
      pSpiralParser->param_sub_expr(pSpiralParser)
 *  - 
 SpiralParser_block_return
      pSpiralParser->block(pSpiralParser)
 *  - 
 SpiralParser_block_expr_return
      pSpiralParser->block_expr(pSpiralParser)
 *  - 
 SpiralParser_print_atom_return
      pSpiralParser->print_atom(pSpiralParser)
 *  - 
 SpiralParser_expr_stmt_return
      pSpiralParser->expr_stmt(pSpiralParser)
 *  - 
 SpiralParser_control_stmt_return
      pSpiralParser->control_stmt(pSpiralParser)
 *  - 
 SpiralParser_stmt_return
      pSpiralParser->stmt(pSpiralParser)
 *  - 
 SpiralParser_prog_return
      pSpiralParser->prog(pSpiralParser)
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_SpiralParser_H
#define _SpiralParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct SpiralParser_Ctx_struct SpiralParser, * pSpiralParser;



    #include <assert.h>


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct SpiralParser_defid_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_defid_expr_return;



typedef struct SpiralParser_defid_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_defid_return;



typedef struct SpiralParser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_expr_return;



typedef struct SpiralParser_multExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_multExpr_return;



typedef struct SpiralParser_atom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_atom_return;



typedef struct SpiralParser_if_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_if_expr_return;



typedef struct SpiralParser_for_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_for_expr_return;



typedef struct SpiralParser_while_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_while_expr_return;



typedef struct SpiralParser_init_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_init_expr_return;



typedef struct SpiralParser_for_do_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_for_do_expr_return;



typedef struct SpiralParser_condition_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_condition_expr_return;



typedef struct SpiralParser_andExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_andExpr_return;



typedef struct SpiralParser_cmp_atom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_cmp_atom_return;



typedef struct SpiralParser_cond_atom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_cond_atom_return;



typedef struct SpiralParser_func_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_func_stmt_return;



typedef struct SpiralParser_func_call_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_func_call_return;



typedef struct SpiralParser_param_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_param_return;



typedef struct SpiralParser_def_param_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_def_param_expr_return;



typedef struct SpiralParser_param_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_param_expr_return;



typedef struct SpiralParser_param_sub_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_param_sub_expr_return;



typedef struct SpiralParser_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_block_return;



typedef struct SpiralParser_block_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_block_expr_return;



typedef struct SpiralParser_print_atom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_print_atom_return;



typedef struct SpiralParser_expr_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_expr_stmt_return;



typedef struct SpiralParser_control_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_control_stmt_return;



typedef struct SpiralParser_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_stmt_return;



typedef struct SpiralParser_prog_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    SpiralParser_prog_return;




/** Context tracking structure for 
SpiralParser

 */
struct SpiralParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     SpiralParser_defid_expr_return
     (*defid_expr)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_defid_return
     (*defid)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_expr_return
     (*expr)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_multExpr_return
     (*multExpr)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_atom_return
     (*atom)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_if_expr_return
     (*if_expr)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_for_expr_return
     (*for_expr)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_while_expr_return
     (*while_expr)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_init_expr_return
     (*init_expr)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_for_do_expr_return
     (*for_do_expr)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_condition_expr_return
     (*condition_expr)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_andExpr_return
     (*andExpr)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_cmp_atom_return
     (*cmp_atom)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_cond_atom_return
     (*cond_atom)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_func_stmt_return
     (*func_stmt)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_func_call_return
     (*func_call)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_param_return
     (*param)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_def_param_expr_return
     (*def_param_expr)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_param_expr_return
     (*param_expr)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_param_sub_expr_return
     (*param_sub_expr)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_block_return
     (*block)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_block_expr_return
     (*block_expr)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_print_atom_return
     (*print_atom)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_expr_stmt_return
     (*expr_stmt)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_control_stmt_return
     (*control_stmt)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_stmt_return
     (*stmt)	(struct SpiralParser_Ctx_struct * ctx);

     SpiralParser_prog_return
     (*prog)	(struct SpiralParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred1_Spiral)	(struct SpiralParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct SpiralParser_Ctx_struct * ctx);
    void	    (*free)   (struct SpiralParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pSpiralParser SpiralParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pSpiralParser SpiralParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__46      46
#define T__47      47
#define T__48      48
#define T__49      49
#define T__50      50
#define AND      4
#define ASSIGN      5
#define BLOCK      6
#define BREAK      7
#define COMMENT      8
#define CONTINUE      9
#define DEF      10
#define DIV      11
#define DO      12
#define DOT      13
#define DOWHILE      14
#define ELSE      15
#define EQ      16
#define ESC_SEQ      17
#define EXPONENT      18
#define FLOAT      19
#define FOR      20
#define FUNCTION      21
#define FUNC_CALL      22
#define GE      23
#define GT      24
#define HEX_DIGIT      25
#define ID      26
#define IF      27
#define INT      28
#define LE      29
#define LITTLE      30
#define MINUS      31
#define MOD      32
#define NE      33
#define NOPE      34
#define OCTAL_ESC      35
#define OR      36
#define PARAM      37
#define PLUS      38
#define PRINT      39
#define RETURN      40
#define STRING      41
#define TIMES      42
#define UNICODE_ESC      43
#define WHILE      44
#define WS      45
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for SpiralParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
